# -*- coding: utf-8 -*-
"""22201054_Amit Sutradhar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uLlKh8fcywcbyO_uLm5Hv95hcbI7fYQg
"""

import heapq

def read_input_file(step_cost):
    graph={}
    heuristics={}
    with open(step_cost, 'r') as file:
        for line in file:
            cost=line.split()
            city=cost[0]
            heuristic=int(cost[1])
            heuristics[city]=heuristic
            graph[city]={}

            for i in range(2,len(cost),2):
                neighbor=cost[i]
                distance=int(cost[i + 1])
                graph[city][neighbor]=distance

    return graph, heuristics

def a_star_search(graph,heuristics,start,goal):
    open_list=[]
    heapq.heappush(open_list,(heuristics[start],start))

    parent={}
    strt_cost={city: None for city in graph}
    strt_cost[start]=0

    total_cost={city:None for city in graph}
    total_cost[start]=heuristics[start]

    while open_list:
        current_city=heapq.heappop(open_list)[1]

        if current_city==goal:
            return reconstruct_path(parent, current_city), strt_cost[goal]

        for child, distance in graph[current_city].items():
            tentative_cost=strt_cost[current_city] + distance if strt_cost[current_city] is not None else None

            if tentative_cost is not None and (strt_cost[child] is None or tentative_cost < strt_cost[child]):
                parent[child]=current_city
                strt_cost[child]=tentative_cost
                total_cost[child]=tentative_cost + heuristics[child] if tentative_cost is not None else None

                if child not in [i[1] for i in open_list]:
                    heapq.heappush(open_list, (total_cost[child], child))

    return None, None

def reconstruct_path(parent, current_city):
    total_path=[current_city]
    while current_city in parent:
        current_city=parent[current_city]
        total_path.append(current_city)
    return total_path[::-1]

def write_output_file(step_cost, path, total_distance):
    with open(step_cost,'w') as file:
        if path is None:
            file.write("NO PATH FOUND\n")
        else:
            file.write("Path: " + " -> ".join(path) + "\n")
            file.write("Total distance: " + str(total_distance) + " km\n")