# -*- coding: utf-8 -*-
"""22201054_Amit Sutradhar.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GcWs4-E0OjiUIzd1ZaXY4Y-9gXsi1W5r
"""

import random

initial_cap=1000
historical_prices=[-1.2, 3.4, -0.8, 2.1, -2.5, 1.7, -0.3, 5.8, -1.1, 3.5]
population_size=4
generations=10
mutation_rate=0.05

def generate_population(size):
    return [
        {
            "stop_loss": round(random.uniform(1,99),1),
            "take_profit": round(random.uniform(1,99),1),
            "trade_size": round(random.uniform(1,99),1)
        }
        for i in range(size)
    ]

def calculate_fitness(chromosome):
    cap=initial_cap
    for j in historical_prices:
        t_s= cap * (chromosome["trade_size"]/100)
        if j <= -chromosome["stop_loss"]:
            loss = t_s * (chromosome["stop_loss"]/100)
            cap-=loss
        elif j >= chromosome["take_profit"]:
            profit=t_s * (chromosome["take_profit"]/100)
            cap+=profit
        else:
            cap+= t_s * (j/100)
    return round(cap - initial_cap,2)

def select_parents(population):
    return random.sample(population,2)

def crossover(parent1, parent2):
    split_point = random.choice(["stop_loss", "take_profit", "trade_size"])
    child1, child2 = parent1.copy(), parent2.copy()
    child1[split_point], child2[split_point] = parent2[split_point], parent1[split_point]
    return child1, child2

def mutate(chromosome):
    if random.random() < mutation_rate:
        gene=random.choice(["stop_loss", "take_profit", "trade_size"])
        chromosome[gene]=round(random.uniform(1,99),1) if gene != "trade_size" else round(random.uniform(10,99), 1)

def genetic_algo():
    population = generate_population(population_size)
    for k in range(generations):
        population = sorted(population, key=calculate_fitness, reverse=True)
        new_population = population[:2]
        while len(new_population) < population_size:
            parent1, parent2 = select_parents(population)
            child1, child2 = crossover(parent1, parent2)
            mutate(child1)
            mutate(child2)
            new_population.extend([child1, child2])
        population=new_population[:population_size]
    best_strategy=max(population, key=calculate_fitness)
    return best_strategy, calculate_fitness(best_strategy)

best_strategy,final_profit=genetic_algo()
print("Best Strategy:", best_strategy)
print("Final Profit:", final_profit)